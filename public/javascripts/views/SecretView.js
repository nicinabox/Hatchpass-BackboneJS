// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  App.Views.SecretView = (function(_super) {

    __extends(SecretView, _super);

    function SecretView() {
      return SecretView.__super__.constructor.apply(this, arguments);
    }

    SecretView.prototype.el = $('#new_secret form');

    SecretView.prototype.domain = $('#domain');

    SecretView.prototype.secret = $('#secret');

    SecretView.prototype.events = {
      'reset': 'render',
      'change': 'render',
      'keyup input.required': 'render',
      'focus #secret': 'saveDomain',
      'click .clear': 'clearInput',
      'autocompletechange #domain': 'load'
    };

    SecretView.prototype.initialize = function() {
      this.listenTo(App.config, 'change', this.render);
      this.listenTo(App.domains, 'add destroy', this.updateAutocomplete);
      return this.domain.autocomplete({
        source: App.domains.map(function(d) {
          var domain;
          domain = d.toJSON();
          return {
            label: domain.url,
            id: domain.id
          };
        }),
        autoFocus: true
      });
    };

    SecretView.prototype.saveDomain = function(e) {
      var domain, existing_domain, used;
      if (e) {
        if (App.mobile) {
          e.target.setSelectionRange(0, e.target.value.length);
        } else {
          setTimeout(function() {
            return e.target.setSelectionRange(0, e.target.value.length);
          }, 0);
        }
      }
      if (App.config.get('save_all')) {
        domain = this.domain.val();
        existing_domain = App.domains.where({
          url: domain
        })[0];
        if (existing_domain) {
          used = existing_domain.get('used');
          existing_domain.save({
            used: (used ? used + 1 : 1)
          });
          App.domains.sort();
        }
        return App.domains.create({
          url: domain,
          config: App.config.toJSON(),
          used: 1
        }, {
          wait: true
        });
      }
    };

    SecretView.prototype.updateAutocomplete = function() {
      return this.domain.autocomplete('option', {
        source: App.domains.pluck('url')
      });
    };

    SecretView.prototype.focusInput = function() {
      var focused;
      focused = false;
      $('input.required:visible', this.$el).each(function() {
        if (!this.value.length) {
          $(this).focus();
          focused = true;
          return false;
        }
      });
      if (!focused) {
        return this.secret[0].focus();
      }
    };

    SecretView.prototype.toggleInputClears = function() {
      return this.$('input').each(function() {
        if ($(this).val().length) {
          return $(this).prev('.clear').fadeIn('fast');
        } else {
          return $(this).prev('.clear').fadeOut('fast');
        }
      });
    };

    SecretView.prototype.clearInput = function(e) {
      e.preventDefault();
      $(e.target).next('input').val('').focus().trigger('change');
      return App.config_view.clear(e);
    };

    SecretView.prototype.load = function(e, domain) {
      var model;
      if (domain.item) {
        model = App.domains.get(domain.item.id);
        return this.render(model);
      }
    };

    SecretView.prototype.render = function(event) {
      var config, model, secret;
      if (event instanceof Backbone.Model) {
        model = event;
        config = model.get('config');
        App.config_view.render(model);
      }
      config || (config = App.config.toJSON());
      this.toggleInputClears();
      secret = new App.Models.Secret({
        domain: this.domain.val(),
        config: config
      });
      this.secret.val(secret.get('secret'));
      if (App.mobile) {
        this.secret.show().attr('readonly', false);
      }
      if (event.keyCode === 13) {
        this.focusInput();
      }
      return App.config_view.setAlert(this.domain.val());
    };

    return SecretView;

  })(Backbone.View);

}).call(this);
